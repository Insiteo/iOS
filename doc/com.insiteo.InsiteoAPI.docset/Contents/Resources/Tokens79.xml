<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/Insiteo.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/Insiteo</TokenIdentifier>
			<Abstract type="html">Class used to provide all generic INSITEO methods.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>
			
			<NodeRef refid="79"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/setDebugListener:</TokenIdentifier>
			<Abstract type="html">A debug listener reference (used to get debug event).</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>@property (assign) id&lt;PDebugListener&gt; debugListener</Declaration>
			
			
			<Anchor>//api/name/debugListener</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Insiteo/debugListener</TokenIdentifier>
			<Abstract type="html">A debug listener reference (used to get debug event).</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>@property (assign) id&lt;PDebugListener&gt; debugListener</Declaration>
			
			
			<Anchor>//api/name/debugListener</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/setCurrentTask:</TokenIdentifier>
			<Abstract type="html">Current running task.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) id&lt;ISPCancelable&gt; currentTask</Declaration>
			
			
			<Anchor>//api/name/currentTask</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/Insiteo/currentTask</TokenIdentifier>
			<Abstract type="html">Current running task.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, retain) id&lt;ISPCancelable&gt; currentTask</Declaration>
			
			
			<Anchor>//api/name/currentTask</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/sharedInstance</TokenIdentifier>
			<Abstract type="html">Static method used to get the unique instance of the InitProvider.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (Insiteo *)sharedInstance</Declaration>
			
			<ReturnValue><Abstract type="html">InitProvider unique instance.</Abstract></ReturnValue>
			<Anchor>//api/name/sharedInstance</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/currentUser</TokenIdentifier>
			<Abstract type="html">Static method that return the current authenticated user.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (ISUser *)currentUser</Declaration>
			
			<ReturnValue><Abstract type="html">The current authenticated user (could be nil).</Abstract></ReturnValue>
			<Anchor>//api/name/currentUser</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/currentSite</TokenIdentifier>
			<Abstract type="html">Static method that return the current started site.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (ISSite *)currentSite</Declaration>
			
			<ReturnValue><Abstract type="html">The current started site (could be nil).</Abstract></ReturnValue>
			<Anchor>//api/name/currentSite</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/getServerTypeDirectoryName:</TokenIdentifier>
			<Abstract type="html">Static method used to get the main data directory name from a given server type.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)getServerTypeDirectoryName:(ISEServerType)serverType</Declaration>
			<Parameters>
				<Parameter>
					<Name>serverType</Name>
					<Abstract type="html">server type.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The related NSString directory name (could be nil).</Abstract></ReturnValue>
			<Anchor>//api/name/getServerTypeDirectoryName:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/getServerTypeStringForURL:</TokenIdentifier>
			<Abstract type="html">Static method used to get the server NSString to use in URLs.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)getServerTypeStringForURL:(ISEServerType)serverType</Declaration>
			<Parameters>
				<Parameter>
					<Name>serverType</Name>
					<Abstract type="html">Server type.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The related NSString to use in URLs only (could be nil).</Abstract></ReturnValue>
			<Anchor>//api/name/getServerTypeStringForURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/getServerTypeFromString:</TokenIdentifier>
			<Abstract type="html">Static method used to get a server type from its given NSString representation.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (ISEServerType)getServerTypeFromString:(NSString *)serverTypeString</Declaration>
			<Parameters>
				<Parameter>
					<Name>serverTypeString</Name>
					<Abstract type="html">INSITEO server type NSString representation.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The related server type.</Abstract></ReturnValue>
			<Anchor>//api/name/getServerTypeFromString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/getServerTypeToString:</TokenIdentifier>
			<Abstract type="html">Static method used to get an NSString representation from a given server type.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)getServerTypeToString:(ISEServerType)serverType</Declaration>
			<Parameters>
				<Parameter>
					<Name>serverType</Name>
					<Abstract type="html">Server type.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The related NSString representation (could be nil).</Abstract></ReturnValue>
			<Anchor>//api/name/getServerTypeToString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/getRenderModeFromString:</TokenIdentifier>
			<Abstract type="html">Static method used to get a render mode from its given NSString representation.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (ISERenderMode)getRenderModeFromString:(NSString *)renderModeString</Declaration>
			<Parameters>
				<Parameter>
					<Name>renderModeString</Name>
					<Abstract type="html">Render mode NSString representation.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The related render mode.</Abstract></ReturnValue>
			<Anchor>//api/name/getRenderModeFromString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/getRenderModeToString:</TokenIdentifier>
			<Abstract type="html">Static method used to get an NSString representation from a given render mode.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)getRenderModeToString:(ISERenderMode)renderMode</Declaration>
			<Parameters>
				<Parameter>
					<Name>renderMode</Name>
					<Abstract type="html">Render mode.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The related NSString representation (could be nil).</Abstract></ReturnValue>
			<Anchor>//api/name/getRenderModeToString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/getBaseURL:</TokenIdentifier>
			<Abstract type="html">Static method used to get the default INSITEO server URL from a given server type.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)getBaseURL:(ISEServerType)server</Declaration>
			<Parameters>
				<Parameter>
					<Name>server</Name>
					<Abstract type="html">The wanted server type.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">The server URL to use.</Abstract></ReturnValue>
			<Anchor>//api/name/getBaseURL:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/Insiteo/getRootDirectoryPath</TokenIdentifier>
			<Abstract type="html">Static method used to get the default INSITEO directory path.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>+ (NSString *)getRootDirectoryPath</Declaration>
			
			<ReturnValue><Abstract type="html">The default INSITEO directory path.</Abstract></ReturnValue>
			<Anchor>//api/name/getRootDirectoryPath</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/isAuthenticated</TokenIdentifier>
			<Abstract type="html">Method used to know if a user is currently authenticated.
@return</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)isAuthenticated</Declaration>
			
			
			<Anchor>//api/name/isAuthenticated</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/launchWithInitializeHandler:andChooseSiteHandler:andStartHandler:andUpdateHandler:andUpdateProgressHandler:</TokenIdentifier>
			<Abstract type="html">Method used to launch the SDK. It will initialize the API and start and update automatically the suggested site.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)launchWithInitializeHandler:(InsiteoInitializeHandler)initializeHandler andChooseSiteHandler:(InsiteoChooseSiteHandler)chooseSiteHandler andStartHandler:(InsiteoStartHandler)startHandler andUpdateHandler:(InsiteoUpdateHandler)updateHandler andUpdateProgressHandler:(InsiteoUpdateProgressHandler)updateProgressHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>initializeHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>chooseSiteHandler</Name>
					<Abstract type="html">The API choose site handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>startHandler</Name>
					<Abstract type="html">The API start site handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>updateHandler</Name>
					<Abstract type="html">The API update site handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>updateProgressHandler</Name>
					<Abstract type="html">The API update progress handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/launchWithInitializeHandler:andChooseSiteHandler:andStartHandler:andUpdateHandler:andUpdateProgressHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/initializeWithAPIKey:andLanguage:andAnalyticsAutoStart:andServerType:andServerUrl:andRenderMode:andInitializeHandler:andChooseSiteHandler:</TokenIdentifier>
			<Abstract type="html">Method used to initialize the API.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)initializeWithAPIKey:(NSString *)apiKey andLanguage:(NSString *)language andAnalyticsAutoStart:(Boolean)analyticsAutoStart andServerType:(ISEServerType)serverType andServerUrl:(NSString *)serverUrl andRenderMode:(ISERenderMode)renderMode andInitializeHandler:(InsiteoInitializeHandler)initializeHandler andChooseSiteHandler:(InsiteoChooseSiteHandler)chooseSiteHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiKey</Name>
					<Abstract type="html">User api key.</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">Wanted initialization language (used to get localized push messages).</Abstract>
				</Parameter><Parameter>
					<Name>analyticsAutoStart</Name>
					<Abstract type="html">Boolean used to know if we can start analytics automatically.</Abstract>
				</Parameter><Parameter>
					<Name>serverType</Name>
					<Abstract type="html">INSITEO server type.</Abstract>
				</Parameter><Parameter>
					<Name>serverUrl</Name>
					<Abstract type="html">Specific server URL to use.</Abstract>
				</Parameter><Parameter>
					<Name>renderMode</Name>
					<Abstract type="html">Wanted render mode.</Abstract>
				</Parameter><Parameter>
					<Name>initializeHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>chooseSiteHandler</Name>
					<Abstract type="html">The API choose site handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/initializeWithAPIKey:andLanguage:andAnalyticsAutoStart:andServerType:andServerUrl:andRenderMode:andInitializeHandler:andChooseSiteHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/initializeWithAPIKey:andLanguage:andAnalyticsAutoStart:andInitializeHandler:andChooseSiteHandler:</TokenIdentifier>
			<Abstract type="html">Method used to initialize the API (serverType = ISEServerTypeProd, serverUrl = nil, renderMode = ISERenderMode2D).</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)initializeWithAPIKey:(NSString *)apiKey andLanguage:(NSString *)language andAnalyticsAutoStart:(Boolean)analyticsAutoStart andInitializeHandler:(InsiteoInitializeHandler)initializeHandler andChooseSiteHandler:(InsiteoChooseSiteHandler)chooseSiteHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>apiKey</Name>
					<Abstract type="html">User api key.</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">Wanted initialization language (used to get localized push messages).</Abstract>
				</Parameter><Parameter>
					<Name>analyticsAutoStart</Name>
					<Abstract type="html">Boolean used to know if we can start analytics automatically.</Abstract>
				</Parameter><Parameter>
					<Name>initializeHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>chooseSiteHandler</Name>
					<Abstract type="html">The API choose site handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/initializeWithAPIKey:andLanguage:andAnalyticsAutoStart:andInitializeHandler:andChooseSiteHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/initializeWithInitializeHandler:andChooseSiteHandler:</TokenIdentifier>
			<Abstract type="html">Method used to initialize the API (apiKey get from .plist, language = device language, analyticsAutoStart = YES, serverType = ISEServerTypeProd, serverUrl = nil, renderMode = ISERenderMode2D).</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)initializeWithInitializeHandler:(InsiteoInitializeHandler)initializeHandler andChooseSiteHandler:(InsiteoChooseSiteHandler)chooseSiteHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>initializeHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>chooseSiteHandler</Name>
					<Abstract type="html">The API choose site handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/initializeWithInitializeHandler:andChooseSiteHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/initializeWithInitializeHandler:</TokenIdentifier>
			<Abstract type="html">Method used to initialize the API (apiKey get from .plist, language = device language, analyticsAutoStart = YES, serverType = ISEServerTypeProd, serverUrl = nil, renderMode = ISERenderMode2D, chooseSiteHandler = nil).</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)initializeWithInitializeHandler:(InsiteoInitializeHandler)initializeHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>initializeHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/initializeWithInitializeHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/getBestSiteWithLatitude:andLongitude:</TokenIdentifier>
			<Abstract type="html">Method used to get the most suitable site from a given lat/long coordinate.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (ISUserSite *)getBestSiteWithLatitude:(double)latitude andLongitude:(double)longitude</Declaration>
			<Parameters>
				<Parameter>
					<Name>latitude</Name>
					<Abstract type="html">Latitude to use.</Abstract>
				</Parameter><Parameter>
					<Name>longitude</Name>
					<Abstract type="html">Longitude to use.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">Most suitable site.</Abstract></ReturnValue>
			<Anchor>//api/name/getBestSiteWithLatitude:andLongitude:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/startAndUpdateWithSite:andLanguage:andApplicationVersion:andForceDownload:andStartHandler:andUpdateHandler:andUpdateProgressHandler:</TokenIdentifier>
			<Abstract type="html">Method used to start and update a given site.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)startAndUpdateWithSite:(ISUserSite *)site andLanguage:(NSString *)language andApplicationVersion:(int)applicationVersion andForceDownload:(Boolean)forceDownload andStartHandler:(InsiteoStartHandler)startHandler andUpdateHandler:(InsiteoUpdateHandler)updateHandler andUpdateProgressHandler:(InsiteoUpdateProgressHandler)updateProgressHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>site</Name>
					<Abstract type="html">The site to start and update.</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">The language to use.</Abstract>
				</Parameter><Parameter>
					<Name>applicationVersion</Name>
					<Abstract type="html">The application version to use.</Abstract>
				</Parameter><Parameter>
					<Name>forceDownload</Name>
					<Abstract type="html">Boolean used to know if we force the download of packages even if the application is up to date.</Abstract>
				</Parameter><Parameter>
					<Name>startHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>updateHandler</Name>
					<Abstract type="html">The API update handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>updateProgressHandler</Name>
					<Abstract type="html">The API update progress handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/startAndUpdateWithSite:andLanguage:andApplicationVersion:andForceDownload:andStartHandler:andUpdateHandler:andUpdateProgressHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/startAndUpdateWithSite:andStartHandler:andUpdateHandler:andUpdateProgressHandler:</TokenIdentifier>
			<Abstract type="html">Method used to start and update a given site (language = most suitable language found, application version = DEFAULTAPPLICATIONVERSION, forceDownload = NO).</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)startAndUpdateWithSite:(ISUserSite *)site andStartHandler:(InsiteoStartHandler)startHandler andUpdateHandler:(InsiteoUpdateHandler)updateHandler andUpdateProgressHandler:(InsiteoUpdateProgressHandler)updateProgressHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>site</Name>
					<Abstract type="html">The site to start and update.</Abstract>
				</Parameter><Parameter>
					<Name>startHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>updateHandler</Name>
					<Abstract type="html">The API update handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>updateProgressHandler</Name>
					<Abstract type="html">The API update progress handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/startAndUpdateWithSite:andStartHandler:andUpdateHandler:andUpdateProgressHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/startWithSite:andLanguage:andApplicationVersion:andForceDownload:andStartHandler:</TokenIdentifier>
			<Abstract type="html">Method used to start a given site.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)startWithSite:(ISUserSite *)site andLanguage:(NSString *)language andApplicationVersion:(int)applicationVersion andForceDownload:(Boolean)forceDownload andStartHandler:(InsiteoStartHandler)startHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>site</Name>
					<Abstract type="html">The site to start.</Abstract>
				</Parameter><Parameter>
					<Name>language</Name>
					<Abstract type="html">The language to use.</Abstract>
				</Parameter><Parameter>
					<Name>applicationVersion</Name>
					<Abstract type="html">The application version to use.</Abstract>
				</Parameter><Parameter>
					<Name>forceDownload</Name>
					<Abstract type="html">Boolean used to know if we force the download of packages even if the application is up to date.</Abstract>
				</Parameter><Parameter>
					<Name>startHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/startWithSite:andLanguage:andApplicationVersion:andForceDownload:andStartHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/startWithSite:andStartHandler:</TokenIdentifier>
			<Abstract type="html">Method used to start and update a given site (language = most suitable language found, application version = DEFAULTAPPLICATIONVERSION, forceDownload = NO).</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)startWithSite:(ISUserSite *)site andStartHandler:(InsiteoStartHandler)startHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>site</Name>
					<Abstract type="html">The site to start and update.</Abstract>
				</Parameter><Parameter>
					<Name>startHandler</Name>
					<Abstract type="html">The API initialization handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/startWithSite:andStartHandler:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/Insiteo/updateCurrentSiteWithWantedPackages:andUpdateHandler:andUpdateProgressHandler:</TokenIdentifier>
			<Abstract type="html">Method used to update a given site.</Abstract>
			<DeclaredIn>Insiteo.h</DeclaredIn>			
			
			<Declaration>- (Boolean)updateCurrentSiteWithWantedPackages:(NSArray *)wantedPackages andUpdateHandler:(InsiteoUpdateHandler)updateHandler andUpdateProgressHandler:(InsiteoUpdateProgressHandler)updateProgressHandler</Declaration>
			<Parameters>
				<Parameter>
					<Name>wantedPackages</Name>
					<Abstract type="html">An array of ISPackage that need to be updated.</Abstract>
				</Parameter><Parameter>
					<Name>updateHandler</Name>
					<Abstract type="html">The API update handler to call.</Abstract>
				</Parameter><Parameter>
					<Name>updateProgressHandler</Name>
					<Abstract type="html">The API update progress handler to call.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">&lt;b&gt;YES&lt;/b&gt; if the given parameters are correct, otherwise &lt;b&gt;NO&lt;/b&gt;.</Abstract></ReturnValue>
			<Anchor>//api/name/updateCurrentSiteWithWantedPackages:andUpdateHandler:andUpdateProgressHandler:</Anchor>
		</Token>
		
	</File>
</Tokens>